libraries 		= []
library_paths 	= ''
cpp_defines 	= {}
cpp_paths       = ['include']
cpp_flags 		= ['-Wall', '-Wextra']
cxx_flags 		= ['-std=c++17']

# Potential warning flags
#=========================
# -pedantic -Wall -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy
# -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations
# -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual
# -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-null-sentinel
# -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused
# -Weffc++ -pedantic  \
# -pedantic-errors -Wextra -Waggregate-return -Wcast-align \
# -Wcast-qual -Wconversion \
# -Wdisabled-optimization \
# -Werror -Wfloat-equal -Wformat=2 \
# -Wformat-nonliteral -Wformat-security  \
# -Wformat-y2k \
# -Wimplicit  -Wimport  -Winit-self  -Winline \
# -Wlong-long \
# -Wmissing-field-initializers -Wmissing-format-attribute   \
# -Wmissing-include-dirs -Wmissing-noreturn \
# -Wpacked  -Wpadded -Wpointer-arith \
# -Wredundant-decls \
# -Wshadow -Wstack-protector \
# -Wstrict-aliasing=2 -Wswitch-default \
# -Wswitch-enum \
# -Wunreachable-code -Wunused \
# -Wunused-parameter \
# -Wvariadic-macros \
# -Wwrite-strings

common = Environment()

common['CXX'] = 'g++-7'

common.Append(LIBS 			= libraries)
common.Append(LIBPATH 		= library_paths)
common.Append(CPPPATH       = cpp_paths)
common.Append(CPPDEFINES 	= cpp_defines)
common.Append(CPPFLAGS 		= cpp_flags)
common.Append(CXXFLAGS 		= cxx_flags)

# release = common.Clone()
# release.Append(CPPDEFINES=['RELEASE'])
# release.VariantDir('../build/release', '.', duplicate=0)
# release_env.VariantDir('../build/release/test', 'test', duplicate=0)

debug = common.Clone()
debug.Append(CPPDEFINES=['DEBUG'], CCFLAGS=['-g'])
debug.VariantDir('debug', 'src', duplicate=0)

# debug.Program('../build/debug/core/functional-test', ['src/simulators/fnsim.cpp'])
debug.Program('debug/frisc-fnsim', ['debug/fnsim/frisc.cpp', 'debug/fnsim/fnsim.cpp'])
# debug.Program('frisc-hls', 'src/ls/frisc.cpp')
